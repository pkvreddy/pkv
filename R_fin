#R packages needed#
library(shiny)
library(ggplot2)
library(plyr)
library(lattice)
library(latticeExtra)

#NCA code#
rm(list=ls())
auc1 <- function(df1){
  
  myfunc1 <-function(x){
    df0=x
    df0$prevtime <- c(0,df0$time[-length(df0$time)])
    df0$prevconc <- c(0,df0$conc[-length(df0$conc)])
    xr <- which.max(df0$conc)
    xmi <- which.min(df0$conc)
    df0$auc_ref1<- ifelse(df0$time<=df0$time[xr],
                          (df0$time -df0$prevtime)* (df0$conc+df0$prevconc)* 0.5,
                          (df0$time-df0$prevtime)*(df0$prevconc- df0$conc)/(log(df0$prevconc/df0$conc)))
    
    auc_ref<-round(sum(df0$auc_ref1),2)
    df0$AUCt <- auc_ref
    df0$Tmax <- df0$time[xr]
    df0$Cmax <- df0$conc[xr]
    df0$Clast <- df0$conc[nrow(df0)]
    df0$Cmin <- df0$conc[xmi]
    df0$prevtime <- NULL
    df0$prevconc <- NULL
    df0$auc_ref1 <- NULL
    return(df0)
  }   
  df2= ddply(df1, "subj",myfunc1)
  
  return(df2)
}

myfunc2 <- function(y){
  df3= y[y$conc>0,]
  n_lambda <- 0
  r.adj <- 0
  
  for (i in (nrow(df3)-2):1){
    
    # all
    r <- r.adj - summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
    if (is.nan(r) == TRUE) {
      #NAToUnknown(x = ke, unknown = 0)
      
      cat("Warning: data points used for log-linear regression may include Cmax \n")
      cat("         or may have error in estimation of lambda_z. \n")
    }
    else {
      if (r < (1e-04)) {
        n_lambda <- nrow(df3) - i + 1
        r.adj <- summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
      }
    }
  }
  Lm1 <- lm(log(conc) ~ time, df3[(nrow(df3) -n_lambda + 1):nrow(df3), ])
  df3$ke <- (-coef(Lm1)[2])
  df3$Thalf <- round(log(2)/(-coef(Lm1)[2]),3)
  df3$inter <- (-coef(Lm1)[1])
  df3$R_sq <- summary(Lm1)$r.sq
  df3$AR_sq <- summary(Lm1)$adj.r.squared
  df3$Npoints <- n_lambda
  df3$AUCextra <-df3$Clast/df3$ke
  df3$AUCINF <- df3$AUCt+df3$AUCextra
  df3$CL <- df3$dose*1000/df3$AUCINF
  df3$VD <- df3$CL/df3$ke
  df3 = df3[!duplicated(df3$subj), ]
  
  
  return(df3)
}

#Server.R#

server <- function(input, output) {
  
  #Input data#
  con<-reactive({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    read.csv(inFile$datapath, header=input$header, sep=input$sep, 
             quote=input$quote)
  }) 
  
  #uiOutput("subj")#
  output$subj <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    SUBJID<-unique(df$subj)
    selectInput("SUBJID", "SUBJID:",SUBJID)})
  
  #uiOutput("dose")#
  output$dose <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    DOSE<-unique(df$dose)
    selectInput("DOSE", "DOSE:",DOSE)})
  
  #uiOutput("period")#
  output$period <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    PERIOD<-unique(df$period)
    selectInput("PERIOD", "PERIOD:",PERIOD)})
  
  #NCA Output#
  #data<-read.csv("C:/Users/pk153230/Desktop/Theo_data.csv")
  output$contents <- renderTable({
    data <-con()
    data <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
    auc1 <- function(df1){
      
      myfunc1 <-function(x){
        df0=x
        df0$prevtime <- c(0,df0$time[-length(df0$time)])
        df0$prevconc <- c(0,df0$conc[-length(df0$conc)])
        xr <- which.max(df0$conc)
        xmi <- which.min(df0$conc)
        df0$auc_ref1<- ifelse(df0$time<=df0$time[xr],
                              (df0$time -df0$prevtime)* (df0$conc+df0$prevconc)* 0.5,
                              (df0$time-df0$prevtime)*(df0$prevconc- df0$conc)/(log(df0$prevconc/df0$conc)))
        
        auc_ref<-round(sum(df0$auc_ref1),2)
        df0$AUCt <- auc_ref
        df0$Tmax <- df0$time[xr]
        df0$Cmax <- df0$conc[xr]
        df0$Clast <- df0$conc[nrow(df0)]
        df0$Cmin <- df0$conc[xmi]
        df0$prevtime <- NULL
        df0$prevconc <- NULL
        df0$auc_ref1 <- NULL
        return(df0)
      }   
      df2= ddply(df1, "subj",myfunc1)
      
      return(df2)
    }
    
    myfunc2 <- function(y){
      df3= y[y$conc>0,]
      n_lambda <- 0
      r.adj <- 0
      
      for (i in (nrow(df3)-2):1){
        
        # all
        r <- r.adj - summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
        if (is.nan(r) == TRUE) {
          #NAToUnknown(x = ke, unknown = 0)
          
          cat("Warning: data points used for log-linear regression may include Cmax \n")
          cat("         or may have error in estimation of lambda_z. \n")
        }
        else {
          if (r < (1e-04)) {
            n_lambda <- nrow(df3) - i + 1
            r.adj <- summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
          }
        }
      }
      Lm1 <- lm(log(conc) ~ time, df3[(nrow(df3) -n_lambda + 1):nrow(df3), ])
      df3$ke <- (-coef(Lm1)[2])
      df3$Thalf <- round(log(2)/(-coef(Lm1)[2]),3)
      df3$inter <- (-coef(Lm1)[1])
      df3$R_sq <- summary(Lm1)$r.sq
      df3$AR_sq <- summary(Lm1)$adj.r.squared
      df3$Npoints <- n_lambda
      df3$AUCextra <-df3$Clast/df3$ke
      df3$AUCINF <- df3$AUCt+df3$AUCextra
      df3$CL <- df3$dose*1000/df3$AUCINF
      df3$VD <- df3$CL/df3$ke
      df3 = df3[!duplicated(df3$subj), ]
      
      
      return(df3)
    }
    data$conc = as.numeric(as.character(data$conc))
    pk1a=data[complete.cases(data$conc),]
    nca1 <- auc1(pk1a)
   nca2 = ddply(nca1,"subj", myfunc2)
    nca3 <- subset(nca2, select = -c(subj,time,conc,dose,period) )
    t1nca<-data.frame(t(nca3))
    t1nca2<-setNames(cbind(rownames(t1nca), t1nca, row.names = NULL), 
             c("Parameters", "Values"))
    print(t1nca2)
    
  })
  
  #Individual Plots#
  
  output$plotind <- renderPlot({
    data <-con()
    DATA1 <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
    
    DATA1$logconc<-log(DATA1$conc)
    q1 = xyplot(DATA1$conc~DATA1$time,type=c('l','p'), data=DATA1,groups= DATA1$subj,
                xlab = 'Time in Hours',
                ylab="Concentration in ng/mL",
                main="Individual Concentration Vs time (lin-lin)",scales = list(tck = c(1,0)))
    
    q2 =xyplot(DATA1$logconc~DATA1$time,type=c('l','p'), data=DATA1,groups= DATA1$subj,
               xlab = 'Time in Hours',log="y",
               ylab="Concentration in ng/mL",
               main="Individual Concentration Vs time (log-lin)",scales=list(tck = c(1,0),y=list(log=10)),yscale.components=yscale.components.log10ticks)
    print(q1, position = c(0, 0, 0.5, 1), more = TRUE)
    print(q2, position = c(0.5, 0, 1, 1))
    
  })
  
  #ALL SUBJECTS PLOTS#
  
  output$plotcum <- renderPlot({
    data1<-con()
    data1$logconc<-log(data1$conc)
    sub<-data.frame(unique(data1$subj))
    nsub<-nrow(sub)/2
    p1 = xyplot(data1$conc~data1$time,type=c('l','p'),groups= data1$subj,data=data1,
                xlab = 'Time in Hours',
                ylab="Concentration in ng/mL",
                main="All Subjects Concentration Vs time (lin-lin)",scales = list(tck = c(1,0)))
    
    p2 =xyplot(data1$logconc~data1$time,type=c('l','p'),groups= data1$subj,data=data1,
               xlab = 'Time in Hours',log="y",
               ylab="Concentration in ng/mL",
               main="All Subjects Concentration Vs time (log-lin)",
               scales=list(tck = c(1,0),yscale.components=yscale.components.log10ticks,
                           ymin=0,ymax=100,auto.key=list(space="top", columns=nsub,title="SUBJID",cex.title=0.45)))
    
    print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
    print(p2, position = c(0.5, 0, 1, 1))
  })
  
}

#Ui.R#
ui <- fluidPage(
  titlePanel("GSK-TEST"),
  sidebarLayout(
    sidebarPanel(
      fileInput('file1', 'Choose CSV File',
                accept=c('text/csv','text/comma-separated-values,text/plain', '.csv')),
      
      
      tags$hr(),
      checkboxInput('header', 'Header', TRUE),
      radioButtons('sep', 'Separator',c(Comma=',',Tab='\t'),','),
      selectInput( "TYPE", "Output Type", c("Individual","All Subjects")),
      conditionalPanel(condition = "input.TYPE == 'Individual'",
                       uiOutput("subj"),
                       uiOutput("dose"),
                       uiOutput("period")
                       
      )),mainPanel(
        
        conditionalPanel(condition= "input.TYPE == 'Individual'",plotOutput("plotind"),tableOutput("contents")),
        
        conditionalPanel(condition= "input.TYPE == 'All Subjects'",plotOutput("plotcum"))
      )
    
  )
)
##Run Shinyapp to output plotOutput("plotind"), ##

shinyApp(ui = ui, server = server)
