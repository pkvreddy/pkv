library(ggplot2)
library(shiny)

#server.R

server <- function(input, output) {
  
  #Input data- to get input data into a  reactive function#
  
  con<-reactive({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    read.csv(inFile$datapath)
  }) 
  
  #uiOutput("subj")- to get interactive data from input file #
  
  output$subj <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    SUBJID<-as.numeric(unique(df$subj))
    val=NROW(SUBJID)
    mn=min(SUBJID)
    mx=max(SUBJID)
    sliderInput("SUBJID", "SUBJID:",SUBJID,value=val,min=mn, max=mx)})
  
  #uiOutput("dose")- to get interactive data from input file#
  
  output$dose <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    DOSE<-unique(df$dose)
    selectInput("DOSE", "DOSE:",DOSE)})
  
  #uiOutput("period")- to get interactive data from input file#
  
  output$period <- renderUI({
    df <-con()
    if (is.null(df)) return(NULL)
    PERIOD<-unique(df$period)
    selectInput("PERIOD", "PERIOD:",PERIOD)})
  
  
  
  
  
  
  
  
  #NCA Individual Output- Individual#
  
  output$contents <- renderTable({
    library(plyr)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL)}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      data <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
      auc1 <- function(df1){
        
        myfunc1 <-function(x){
          df0=x
          df0$prevtime <- c(0,df0$time[-length(df0$time)])
          df0$prevconc <- c(0,df0$conc[-length(df0$conc)])
          xr <- which.max(df0$conc)
          xmi <- which.min(df0$conc)
          df0$auc_ref1<- ifelse(df0$time<=df0$time[xr],
                                (df0$time -df0$prevtime)* (df0$conc+df0$prevconc)* 0.5,
                                (df0$time-df0$prevtime)*(df0$prevconc- df0$conc)/(log(df0$prevconc/df0$conc)))
          
          auc_ref<-round(sum(df0$auc_ref1),2)
          df0$AUCt <- auc_ref
          df0$Tmax <- df0$time[xr]
          df0$Cmax <- df0$conc[xr]
          df0$Clast <- df0$conc[nrow(df0)]
          df0$Cmin <- df0$conc[xmi]
          df0$prevtime <- NULL
          df0$prevconc <- NULL
          df0$auc_ref1 <- NULL
          return(df0)
        }   
        df2= ddply(df1, "subj",myfunc1)
        
        return(df2)
      }
      
      myfunc2 <- function(y){
        df3= y[y$conc>0,]
        n_lambda <- 0
        r.adj <- 0
        
        for (i in (nrow(df3)-2):1){
          
          # all
          r <- r.adj - summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
          if (is.nan(r) == TRUE) {
            #NAToUnknown(x = ke, unknown = 0)
            
            cat("Warning: data points used for log-linear regression may include Cmax \n")
            cat("         or may have error in estimation of lambda_z. \n")
          }
          else {
            if (r < (1e-04)) {
              n_lambda <- nrow(df3) - i + 1
              r.adj <- summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
            }
          }
        }
        Lm1 <- lm(log(conc) ~ time, df3[(nrow(df3) -n_lambda + 1):nrow(df3), ])
        df3$ke <- (-coef(Lm1)[2])
        df3$Thalf <- round(log(2)/(-coef(Lm1)[2]),3)
        df3$inter <- (-coef(Lm1)[1])
        df3$R_sq <- summary(Lm1)$r.sq
        df3$AR_sq <- summary(Lm1)$adj.r.squared
        df3$Npoints <- n_lambda
        df3$AUCextra <-df3$Clast/df3$ke
        df3$AUCINF <- df3$AUCt+df3$AUCextra
        df3$CL <- df3$dose*1000/df3$AUCINF
        df3$VD <- df3$CL/df3$ke
        df3 = df3[!duplicated(df3$subj), ]
        
        
        return(df3)}
      
      
      data$conc = as.numeric(as.character(data$conc))
      pk1a=data[complete.cases(data$conc),]
      nca1 <- auc1(pk1a)
      nca2 = ddply(nca1,"subj", myfunc2)
      nca3 <- subset(nca2, select = -c(subj,time,conc,dose,period) )
      t1nca<-data.frame(t(nca3))
      t1nca2<-setNames(cbind(rownames(t1nca), t1nca, row.names = NULL), 
                       c("Parameters", "Values"))
      t1<-t1nca2[t1nca2$Parameters == c('AUCt'),]
      t2<-t1nca2[t1nca2$Parameters == c('Tmax'),]
      t5<-t1nca2[t1nca2$Parameters == c('Clast'),]
      t6<-t1nca2[t1nca2$Parameters == c('Thalf'),]
      t7<-t1nca2[t1nca2$Parameters == c('AUCINF'),]
      ncal <- rbind(t1, t2,t5,t6,t7) 
      #fin2<-mydf[,c("Parameter","AUCt","Tmax","Cmax","Clast","Cmin","Thalf","R_sq","Npoints","AUCINF","CL","VD")] 
      print(ncal)
    }
  })
  
  
  
  output$contents2 <- renderTable({
    
    library(plyr)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL) }
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      data <- subset(data ,data$dose==input$DOSE & data$period==input$PERIOD)
      auc1 <- function(df1){
        
        myfunc1 <-function(x){
          df0=x
          df0$prevtime <- c(0,df0$time[-length(df0$time)])
          df0$prevconc <- c(0,df0$conc[-length(df0$conc)])
          xr <- which.max(df0$conc)
          xmi <- which.min(df0$conc)
          df0$auc_ref1<- ifelse(df0$time<=df0$time[xr],
                                (df0$time -df0$prevtime)* (df0$conc+df0$prevconc)* 0.5,
                                (df0$time-df0$prevtime)*(df0$prevconc- df0$conc)/(log(df0$prevconc/df0$conc)))
          
          auc_ref<-round(sum(df0$auc_ref1),2)
          df0$AUCt <- auc_ref
          df0$Tmax <- df0$time[xr]
          df0$Cmax <- df0$conc[xr]
          df0$Clast <- df0$conc[nrow(df0)]
          df0$Cmin <- df0$conc[xmi]
          df0$prevtime <- NULL
          df0$prevconc <- NULL
          df0$auc_ref1 <- NULL
          return(df0)
        }   
        df2= ddply(df1, "subj",myfunc1)
        
        return(df2)
      }
      
      myfunc2 <- function(y){
        df3= y[y$conc>0,]
        n_lambda <- 0
        r.adj <- 0
        
        for (i in (nrow(df3)-2):1){
          
          # all
          r <- r.adj - summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
          if (is.nan(r) == TRUE) {
            #NAToUnknown(x = ke, unknown = 0)
            
            cat("Warning: data points used for log-linear regression may include Cmax \n")
            cat("         or may have error in estimation of lambda_z. \n")
          }
          else {
            if (r < (1e-04)) {
              n_lambda <- nrow(df3) - i + 1
              r.adj <- summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
            }
          }
        }
        Lm1 <- lm(log(conc) ~ time, df3[(nrow(df3) -n_lambda + 1):nrow(df3), ])
        df3$ke <- (-coef(Lm1)[2])
        df3$Thalf <- round(log(2)/(-coef(Lm1)[2]),3)
        df3$inter <- (-coef(Lm1)[1])
        df3$R_sq <- summary(Lm1)$r.sq
        df3$AR_sq <- summary(Lm1)$adj.r.squared
        df3$Npoints <- n_lambda
        df3$AUCextra <-df3$Clast/df3$ke
        df3$AUCINF <- df3$AUCt+df3$AUCextra
        df3$CL <- df3$dose*1000/df3$AUCINF
        df3$VD <- df3$CL/df3$ke
        df3 = df3[!duplicated(df3$subj), ]
        
        
        return(df3)
      }
      
      data$conc = as.numeric(as.character(data$conc))
      pk1a=data[complete.cases(data$conc),]
      nca1 <- auc1(pk1a)
      nca2 = ddply(nca1,c("subj","dose","period"), myfunc2)
      
      nca3 <- subset(nca2, select = -c(time,conc,inter,ke,AR_sq,AUCextra) )
      dup = unique(nca3);
      fin<-aggregate(dup[, 4:14], list(dup$dose, dup$period), mean)
      names(fin)[names(fin) == 'Group.1'] <- 'dose'
      names(fin)[names(fin) == 'Group.2'] <- 'period'
      fin1 <- subset(fin,select=-c(dose,period))
      print(fin1)
    }
  })
  #NCA Cumulative Output #
  
  cumnca <- reactive({
    library(plyr)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print("   ")}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      auc1 <- function(df1){
        
        myfunc1 <-function(x){
          df0=x
          df0$prevtime <- c(0,df0$time[-length(df0$time)])
          df0$prevconc <- c(0,df0$conc[-length(df0$conc)])
          xr <- which.max(df0$conc)
          xmi <- which.min(df0$conc)
          df0$auc_ref1<- ifelse(df0$time<=df0$time[xr],
                                (df0$time -df0$prevtime)* (df0$conc+df0$prevconc)* 0.5,
                                (df0$time-df0$prevtime)*(df0$prevconc- df0$conc)/(log(df0$prevconc/df0$conc)))
          
          auc_ref<-round(sum(df0$auc_ref1),2)
          df0$AUCt <- auc_ref
          df0$Tmax <- df0$time[xr]
          df0$Cmax <- df0$conc[xr]
          df0$Clast <- df0$conc[nrow(df0)]
          df0$Cmin <- df0$conc[xmi]
          df0$prevtime <- NULL
          df0$prevconc <- NULL
          df0$auc_ref1 <- NULL
          return(df0)
        }   
        df2= ddply(df1, "subj",myfunc1)
        
        return(df2)
      }
      
      myfunc2 <- function(y){
        df3= y[y$conc>0,]
        n_lambda <- 0
        r.adj <- 0
        
        for (i in (nrow(df3)-2):1){
          
          # all
          r <- r.adj - summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
          if (is.nan(r) == TRUE) {
            cat("Warning: data points used for log-linear regression may include Cmax \n")
            cat("         or may have error in estimation of lambda_z. \n")
          }
          else {
            if (r < (1e-04)) {
              n_lambda <- nrow(df3) - i + 1
              r.adj <- summary(lm(log(conc) ~ time, df3[i:nrow(df3),]))$adj.r.squared
            }
          }
        }
        Lm1 <- lm(log(conc) ~ time, df3[(nrow(df3) -n_lambda + 1):nrow(df3), ])
        df3$ke <- (-coef(Lm1)[2])
        df3$Thalf <- round(log(2)/(-coef(Lm1)[2]),3)
        df3$inter <- (-coef(Lm1)[1])
        df3$R_sq <- summary(Lm1)$r.sq
        df3$AR_sq <- summary(Lm1)$adj.r.squared
        df3$Npoints <- n_lambda
        df3$AUCextra <-df3$Clast/df3$ke
        df3$AUCINF <- df3$AUCt+df3$AUCextra
        df3$CL <- df3$dose*1000/df3$AUCINF
        df3$VD <- df3$CL/df3$ke
        df3 = df3[!duplicated(df3$subj), ]
        
        
        return(df3)
      }
      
      data$conc = as.numeric(as.character(data$conc))
      pk1a=data[complete.cases(data$conc),]
      nca1 <- auc1(pk1a)
      # nca2 = ddply(nca1,"subj", myfunc2)
      #  nca3 <- subset(nca2, select = -c(time,conc) )
      nca3 <- subset(nca1, select = -c(time,conc) )
      dup = unique(nca3);
      print(dup)
    }
  })
  #Individual Plots#
  
  output$plotind1 <- renderPlot({
    library(lattice)
    library(latticeExtra)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print("   ")}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      DATA1 <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
      
      DATA1$logconc<-log(DATA1$conc)
      library(ggplot2)
      nsub<-nrow(sub)/2
      p0<-ggplot(DATA1, aes(x=DATA1$time, y=DATA1$conc)) + geom_line() + geom_point() +
        labs(x="Time in Hours",y="Concentration in ng/mL") 
      q1 <- p0 + theme_bw() +
        theme(
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          legend.position = "none")+ labs(title = "Individual Concentration Vs time \n (lin-lin)") 
      
      q1
    } 
  })
  
  output$plotind2 <- renderPlot({
    library(lattice)
    library(latticeExtra)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print("   ")}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      DATA1 <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
      
      DATA1$logconc<-log(DATA1$conc)
      library(ggplot2)
      nsub<-nrow(sub)/2
      
      
      p01<-ggplot(DATA1, aes(x=DATA1$time, y=DATA1$logconc)) + geom_line() + geom_point() +
        labs(x="Time in Hours",y="Log Concentration in ng/mL") 
      q2 <- p01 + theme_bw() +
        theme(
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          legend.position = "none")  + labs(title = "\n                  (log-lin)")
      q2
    } 
  })
  
  #ALL SUBJECTS PLOTS#
  
  output$plotcum1 <- renderPlot({
    library(lattice)
    library(latticeExtra)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print("   ")}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      data1 <- subset(data ,data$dose==input$DOSE & data$period==input$PERIOD)
      data1$logconc<-log(data1$conc)
      sub<-data.frame(unique(data1$subj))
      nsub<-nrow(sub)/2
      library(ggplot2)
      nsub<-nrow(sub)/2
      p00<-ggplot(data1, aes(x=data1$time, y=data1$conc,color=factor(data1$subj))) + geom_line() + geom_point() +
        labs(x="Time in Hours",y="Concentration in ng/mL") 
      p1 <- p00 + theme_bw() +
        theme(
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          legend.position = "none") + labs(title = "All Subjects Concentration Vs time \n (lin-lin)")
      
      p1
    }
  })
  output$plotcum2 <- renderPlot({
    library(lattice)
    library(latticeExtra)
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print("   ")}
    else if (is.null(inFile)==FALSE) {
      
      data<-read.csv(inFile$datapath)  
      DATA1 <- subset(data ,  data$dose==input$DOSE & data$period==input$PERIOD)
      
      DATA1$logconc<-log(DATA1$conc)
      library(ggplot2)
      nsub<-nrow(sub)/2
      
      
      p011<-ggplot(DATA1, aes(x=DATA1$time, y=DATA1$logconc,color=factor(DATA1$subj))) + geom_line() + geom_point() +
        labs(x="Time in Hours",y="Log Concentration in ng/mL") 
      q2 <- p011 + theme_bw() +
        theme(
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          legend.position = "none")  + labs(title = "\n                  (log-lin)")
      q2
    } 
  })
  con1<-reactive({
    
    data<-con()
    DATA1 <- subset(data , data$subj == input$SUBJID & data$dose==input$DOSE & data$period==input$PERIOD)
    
    DATA1$logconc<-log(DATA1$conc)
    DATA1
  }) 
  output$plot_clickedpoints1 <- renderTable({
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL) }
    else if (is.null(inFile)==FALSE) {
      res <- nearPoints(con1(), input$plot_click1, "time","conc", )
      if (nrow(res) == 0)
        return()
      res
    }})
  
  output$plot_clickedpoints2 <- renderTable({
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL) }
    else if (is.null(inFile)==FALSE) {
      res <- nearPoints(con1(), input$plot_click2, "time","logconc", )
      if (nrow(res) == 0)
        return()
      res
    }}) 
  con11<-reactive({
    
    data<-con()
    DATA1 <- subset(data , data$dose==input$DOSE & data$period==input$PERIOD)
    
    DATA1$logconc<-log(DATA1$conc)
    DATA1
  }) 
  
  output$plot_clickedpoints11 <- renderTable({
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL) }
    else if (is.null(inFile)==FALSE) {
      res <- nearPoints(con11(), input$plot_click11, "time","conc", )
      if (nrow(res) == 0)
        return()
      res
    }})
  
  output$plot_clickedpoints22 <- renderTable({
    inFile <- input$file1
    if (is.null(inFile)==TRUE) {print(NULL) }
    else if (is.null(inFile)==FALSE) {
      res <- nearPoints(con11(), input$plot_click22, "time","logconc", )
      if (nrow(res) == 0)
        return()
      res
    }}) 
}

#Ui.R
ui <- fluidPage(
  titlePanel("GSK-TEST"),
  sidebarLayout(
    sidebarPanel(
      fileInput('file1', 'Choose CSV File',
                accept=c('text/csv','text/comma-separated-values,text/plain', '.csv')),
      
      
      tags$hr(),
      checkboxInput('header', 'Header', TRUE),
      radioButtons('sep', 'Separator',c(Comma=',',Tab='\t'),','),
      selectInput( "TYPE", "Output Type", c("Individual","All Subjects")), uiOutput("dose"), uiOutput("period"),
      
      conditionalPanel(condition = "input.TYPE == 'Individual'",uiOutput("subj")),
      tabsetPanel(
        tabPanel("Reporting",
                 downloadButton('downloadData', 'Download NCA .csv'),
                 downloadButton('report','Download plots .pdf')))
      
    ),mainPanel(
      
      conditionalPanel(condition= "input.TYPE == 'Individual'",
                       splitLayout(cellWidths = c("45%", "45%"),
                                   plotOutput("plotind1", height=300,click = "plot_click1"),
                                   plotOutput("plotind2", height=300,click = "plot_click2")),
                       #h4("Data points"),
                       tableOutput("plot_clickedpoints1"),tableOutput("plot_clickedpoints2"),tableOutput("contents")
      ),
      conditionalPanel(condition= "input.TYPE == 'All Subjects'",
                       splitLayout(cellWidths = c("45%", "45%"),
                                   plotOutput("plotcum1", height=300,click = "plot_click11"),
                                   plotOutput("plotcum2", height=300,click = "plot_click22")),
                       #h4("Data points"),
                       tableOutput("plot_clickedpoints11"),tableOutput("plot_clickedpoints22"),tableOutput("contents2")
      ))
  ))



shinyApp(ui = ui, server = server)


